name: Data Archive Models CI

# Triggers the workflow on pushes to the 'main' branch, pull requests targeting 'main',
# release creation, and also allows manual triggering via the GitHub Actions UI.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [created]
  workflow_dispatch:

jobs:
  # Job 1: Sets up the Nix build environment and validates your project's flake.nix configuration.
  # This ensures the foundational build tools (like Java, Maven) are available via Nix.
  setup-build-environment:
    name: Setup Build Environment
    runs-on: ubuntu-latest # Using Ubuntu for the runner environment
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Uses the latest stable action for checking out your repository.

      - name: Install Nix with Flakes Support
        # This action installs Nix on the runner and enables experimental flakes support.
        # It's essential for your 'nix develop' commands to function.
        uses: cachix/install-nix-action@v31 # Use a specific version for stability.
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Restore Nix Cache
        uses: actions/cache@v3
        id: nix-cache
        with:
          path: |
            ~/.cache/nix
            flake.lock
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock', 'flake.nix') }}
          restore-keys: |
            ${{ runner.os }}-nix-

      - name: Verify Nix Development Shell
        # This step attempts to enter your Nix development shell.
        # It's a crucial check to ensure your flake.nix or shell.nix can successfully
        # load all defined dependencies (like Java, Maven, etc.).
        run: nix develop --command true

      - name: Save Nix Cache
        # Only run this step if the cache was not restored or if the flake.lock has changed
        if: steps.nix-cache.outputs.cache-hit != 'true'
        run: echo "Nix cache updated and will be saved automatically"

  # Job 2: Runs the dedicated unit tests for schema validation.
  # This job executes only after the Nix environment has been successfully set up.
  run-unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: setup-build-environment # Ensures this job only starts after the environment setup is complete.
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Nix with Flakes Support (for this job)
        # Each job in GitHub Actions runs in an isolated environment.
        # Therefore, Nix needs to be installed again for this job's context.
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Restore Nix Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/nix
            flake.lock
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock', 'flake.nix') }}
          restore-keys: |
            ${{ runner.os }}-nix-

      - name: Execute Specific Schema Validation Tests
        # Runs the Maven test command within the Nix development shell.
        # This ensures that tests related to 'JsonSchemaValidationTest' are executed
        # using the Java and Maven versions specified in your Nix configuration.
        run: nix develop --command mvn -Dtest=JsonSchemaValidationTest test

  # Job 3: Generates Java models from the JSON schemas.
  # This job proceeds only if the unit tests have passed successfully.
  generate-java-models:
    name: Generate Java Models
    runs-on: ubuntu-latest
    needs: run-unit-tests # Ensures this job only starts after all tests have passed.
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Nix with Flakes Support (for this job)
        # Nix needs to be installed for this independent job as well to ensure the environment is ready.
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Restore Nix Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/nix
            flake.lock
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock', 'flake.nix') }}
          restore-keys: |
            ${{ runner.os }}-nix-

      - name: Generate Java Classes from JSON Schemas
        # Executes the Maven package phase within the Nix development shell.
        # This will trigger 'jsonschema2pojo' to generate your Java classes.
        # Tests are skipped as they were already run in the 'Run Unit Tests' job.
        run: nix develop --command mvn package -DskipTests

      - name: Upload Generated Java Models as Artifact
        # This step uploads the generated Java source code as a workflow artifact.
        # It will be named 'data-archive-models-java-source' and can be downloaded
        # directly from the workflow run details page in GitHub.
        uses: actions/upload-artifact@v4
        with:
          name: data-archive-models-java-source
          path: target/

  # Job 4: Publishes the Java .jar artifacts to GitHub Packages
  publish-to-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: generate-java-models # Ensures this job only starts after the Java models have been generated
    # Only run this job when pushing to the main branch, creating a release, or manually triggered
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Nix with Flakes Support (for this job)
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Configure Maven for GitHub Packages
        # This step dynamically creates a Maven settings.xml file with GitHub Packages authentication.
        # It's necessary because 'nix develop' doesn't automatically configure Maven like 'setup-java'.
        #
        # Security Note:
        # - The settings.xml file is created temporarily in the runner's ephemeral environment.
        # - It is automatically destroyed after the job completes, preventing persistent storage of credentials.
        # - The GITHUB_TOKEN (accessed via secrets.GITHUB_TOKEN) is automatically masked in logs by GitHub.
        run: |
          # Create the .m2 directory if it doesn't exist
          mkdir -p ~/.m2

          # Write the settings.xml content using a "here-doc" for clean multi-line output
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>github</id> <!-- This ID must match the <id> in your pom.xml's <distributionManagement> -->
                <username>${{ github.actor }}</username> <!-- Uses the GitHub user/bot that triggered the workflow -->
                <password>${{ secrets.GITHUB_TOKEN }}</password> <!-- Uses the auto-generated, short-lived GITHUB_TOKEN -->
              </server>
            </servers>
            <profiles>
              <profile>
                <id>github</id>
                <repositories>
                  <repository>
                    <id>github</id>
                    <url>https://maven.pkg.github.com/eth-library/data-archive-models</url>
                    <snapshots>
                      <enabled>true</enabled>
                    </snapshots>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>github</activeProfile>
            </activeProfiles>
          </settings>
          EOF
        env:
          # Explicitly pass GITHUB_TOKEN to the environment, though it's primarily
          # consumed by Maven via the settings.xml configuration.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Packages
        # Executes the Maven deploy goal within the Nix development shell.
        # This will publish the artifact to GitHub Packages.
        # The GITHUB_TOKEN is used for authentication.
        run: nix develop --command mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
